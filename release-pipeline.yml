variables:
- group: Databricks-environment

trigger:
  batch: true
  branches:
    include:
    - 'main'

  tags:
    include:
      - v*.*
      - prod
      - qualif
      - dev

parameters:
  - name: deployDev
    displayName: Deploy Dev ?
    type: boolean
    default: true
  - name: deployQualif
    displayName: Deploy Qualif ?
    type: boolean
    default: false
  - name: deployProd
    displayName: Deploy Prod ?
    type: boolean
    default: false

stages:
#############Security Checks and Code Review ###################
- stage: SECURITY_CHECK
  displayName: Sonar Qube and Security Checks 
  jobs:
    - template: "pipelines/security-checks.yml"
    

  ######### Unit Tests ##########
- stage: UNIT_TESTS
  dependsOn: SECURITY_CHECK
  displayName: Run unit tests
  jobs:
    - template: "pipelines/unit-test.yml"

############ Build  ###########################
- stage: BUILD_STAGE
  dependsOn: UNIT_TESTS
  jobs:
  - job: onBuildJob
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r unit-requirements.txt
        pip install -e .
      displayName: 'Install dependencies'

    - script: |
        # dbx deploy --jobs=smin-integration-test --files-only
      displayName: 'Deploy integration test'

    - script: |
        # dbx launch --job=smin-integration-test --as-run-submit --trace
      displayName: 'Launch integration on test'
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml' 
        failTaskOnFailedTests: true

################## Release ###########################
- stage: RELEASE_STAGE
  dependsOn: BUILD_STAGE
  condition: and(succeeded(), eq('${{parameters.deployDev}}', true))
  # condition: |
  #   or(
  #     startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'),
  #     startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  #   )
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip
          pip install -r unit-requirements.txt
          pip install -e .
        displayName: 'Install dependencies'
      
      - script: |
          echo -e "[DEFAULT]\nhost: $(DATABRICKS_HOST)\ntoken: $(DATABRICKS_TOKEN)" \
            > $HOME/.databrickscfg
          cat $HOME/.databrickscfg
        env:
          DATABRICKS_HOST: $(DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
        displayName: 'Edit databricks config file'

      - script: |
          # dbx execute --cluster-name=SingleNode-cluster --job=smin-sample
        displayName: 'Test run Job '

      - script: |
          dbx deploy
        displayName: 'Deploy all Jobs'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-*.xml' 
          failTaskOnFailedTests: true

################## Release Qualif ###########################
- stage: RELEASE_QUALIF_STAGE
  dependsOn: BUILD_STAGE
  condition: and(succeeded(), eq('${{parameters.deployQualif}}', true))
  # condition: |
  #   or(
  #     startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'),
  #     startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  #   )
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip
          pip install -r unit-requirements.txt
          pip install -e .
        displayName: 'Install dependencies'

      - script: |
          pytest tests/unit --junitxml=test-unit.xml
        displayName: 'Run Unit tests'

      - script: |
          # dbx deploy --jobs=smin-raw-to-bronze
        displayName: 'Deploy the job'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-*.xml' 
          failTaskOnFailedTests: true
